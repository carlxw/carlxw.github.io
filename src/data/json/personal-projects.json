[
    {
        "title": "Rrythm Music Bot",
        "img": "rrythm.png",
        "protected": true,
        "header": "A modernized Rythm Bot clone created with my interpretation",
        "story": "Ever since Rythm got shut down in 2021 by YouTube, I noticed that my friends were spending less time hanging around on Discord voice calls during the pandemic isolation. Firstly, what the heck, YouTube. Not cool. Secondly, I pondered if I could remake the bot myself. An innocent Google search and a few YouTube videos eventually led me to develop a fully-functional backend Discord bot that I now locally host on my Raspberry Pi using a Python script. This project is one of my first major successes with programming and remains to be my proudest achievement as I applied concepts of object-oriented programming from my computer science class in high school",
        "tags": 
            [
                {
                    "title": "NodeJS",
                    "link": "https://nodejs.org/en/"
                },
                {
                    "title": "discord.js",
                    "link": "https://discord.js.org/#/"
                },
                {
                    "title": "play-dl",
                    "link": "https://www.npmjs.com/package/play-dl"
                }
            ],
        "desc_points": 
        [
            "Backend Discord bot that takes user input from chat and streams audio from a YouTube source",
            "Utilized object-oriented programming abstraction and encapsulation to promote code maintainability and modularity",
            "Learned how to read API documentation, use version control (git), organize code in File Explorer, and structure code neatly with adaquate documentation",
            "Implemented a customized queue data structure for music player functionality",
            "Painfully understood the concept of Promises, async, await through raw trial and error",
            "Coded without ChatGPT or AI tomfoolery"
        ],
        "github": "https://github.com/carlxw/rrythm"
    },
    {
        "title": "HealthChain",
        "img": "healthchain.png",
        "white_bg": true,
        "header": "DeltaHacks IX winner for \"Most Creative Use of Verbwire API\"",
        "story": "It was all one day when a friend of mine asked me to sign up with him for a hackathon hosted at his university. I was like \"why the heck not\"! After all, this seems like it'd be a terrific opportunity to see how good my coding skills are (spoiler alert: I was humbled much). We created a IPFS uploader for physicians to upload personal health information (PHI) onto the Ethereum blockchain. As the one in charge of the backend, I initially intended to use Verbwire API to do all the uploading, but the documentation example doesn't work (which was hilarious), and so I switched to use Moralis instead. Funnily enough, this still won 'Most Innovative Use of Verbwire API' thanks to our ingenious idea. That, or a challenge with awards for 10 groups, got 10 groups signing up.",
        "tags":
            [
                {
                    "title": "GatsbyJS",
                    "link": "https://www.gatsbyjs.com/"
                },
                {
                    "title": "NodeJS (Express, CORS)",
                    "link": "https://nodejs.org/en/"
                },
                {
                    "title": "Moralis",
                    "link": "https://moralis.io/"
                },
                {
                    "title": "Verbire",
                    "link": "https://www.verbwire.com/"
                },
                {
                    "title": "Axios",
                    "link": "https://www.npmjs.com/package/axios"
                }
            ],
        "desc_points": 
        [
            "Used \"Verbwire\" API to upload PDF files containing PHI onto the Ethereum blockchain",
            "Developed a failsafe system where if uploading via Verbwire failed, Moralis will be used instead (on early implementations; this was omitted on final submission)",
            "Learned how to make GET and POST requests using axios",
            "Victorious in the \"I-had-no-idea-what-I-was-doing-mindset-but-it-still-worked\" mindset"
        ],
        "github": "https://github.com/DeltaHacks-WebOfLife/HealthChain",
        "devpost": "https://devpost.com/software/healthchain-hybn8i"
    },
    {
        "title": "Pomodoro Website",
        "img": "pomodoro.png",
        "white_bg": true,
        "header": "All-in-one productivity enabler: to-do list, pomodoro timer, and Spotify music control",
        "story": "This was an idea that was briefly mentioned during my first hackathon, and I thought it would be really cool to build myself. I found that many of my distractions were caused by switching between applications to see my to-do list, re-wind my timer and switch the current song playing on my Spotify. By keeping all of the things that I would ever need while studying in one place, I found that my studying efficiency significantly increased! This was a weird project to build. Weird as in dealing with things ranging from building this project backwards from Spotify's sample code to get a functional music player, and the replacing request with fetch(), then to Axios. All because request is deprecated and fetch() isn't natively supported in NodeJS!",
        "tags":
            [
                {
                    "title": "ReactJS",
                    "link": "https://reactjs.org/"
                },
                {
                    "title": "Express",
                    "link": "https://www.npmjs.com/package/express"
                },
                {
                    "title": "CORS",
                    "link": "https://www.npmjs.com/package/cors"
                },
                {
                    "title": "Axios",
                    "link": "https://www.npmjs.com/package/axios"
                },
                {
                    "title": "Spotify Web API",
                    "link": "https://developer.spotify.com/documentation/web-playback-sdk"
                }
            ],
        "desc_points": 
        [
            "Notion-styled  to-do list with editing capabilities",
            "Fully deployed web application, frontend being hosted on GitHub pages, and backend hosted on Render",
            "JSON config file used to enable modularity and improve maintainability of web app",
            "Express-CORS backend to allow user to log into Spotify after following awkward documentation",
            "fetch()/Axios HTTP request calls made to Spotify to harness API features"
        ],
        "github": "https://github.com/carlxw/pomodoro-website",
        "link": "https://carlxw.dev/pomodoer/"
    },
    {
        "title": "Personal Website",
        "img": "website.png",
        "white_bg": true,
        "header": "A virtual presentation of myself; what you're seeing right now!",
        "story": "Yeah, I'm pretty sure I know how to use semicolons. This was a very fun project for me. Don't need any wix or weebly here >:). It took me about 3 days to get through TheNetNinja's ReactJS tutorials and then essentially forever to get this website up and going. If I had any regrets in life, that would be having a preference in improvising over planning. Being totally honest, the design for this webpage in my head is way cooler.",
        "tags":
            [
                {
                    "title": "ReactJS",
                    "link": "https://reactjs.org/"
                },
                {
                    "title": "react-device-detect",
                    "link": "https://www.npmjs.com/package/react-device-detect"
                }
            ],
        "desc_points": 
        [
            "Learned ReactJS and CSS in a short time frame (1 week) to develop a personal website",
            "Features a detection of mobile web clients to implore users not to see this site on their small screen",
            "Implemented simple animations to enable minimalism",
            "Attempted to study modern web design, but 2010 called, saying that they love my design",
            "Perfected the art of Ctrl+C and Ctrl+V"
        ],
        "github": "https://github.com/carlxw/personal-website"
    },
    {
        "title": "Tip Tap Type",
        "img": "tip_tap_type.png",
        "header": "Minimalistic typing game from a high school project",
        "story": "This is a Greenfoot project that I worked on with a few of my high school friends. The primarily objective of this project was to practically use data structures, with the theme of creating a word-related game. This was a daunting project, but we managed to give it everything it needs to be called a game (music, sound effects, animations, and UI).",
        "tags": 
            [
                {
                    "title": "Greenfoot",
                    "link": "https://www.greenfoot.org/download"
                }
            ],
        "desc_points": 
        [
            "Coded in the worst IDE ever known to humanity",
            "Developed the core typing algorithm using an implemented Stack data structure",
            "Enhanced finter-typing endurance because it's Java"
        ],
        "github": "https://github.com/yoyozhuang10/P1E-TipTapType"
    },
    {
        "title": "After This Semester...",
        "img": "tip_tap_type.png",
        "header": "Minimalistic typing game from a high school project",
        "story": "This is a Greenfoot project that I worked on with a few of my high school friends. The primarily objective of this project was to practically use data structures, with the theme of creating a word-related game. This was a daunting project, but we managed to give it everything it needs to be called a game (music, sound effects, animations, and UI).",
        "tags": 
            [
                {
                    "title": "Greenfoot",
                    "link": "https://www.greenfoot.org/download"
                }
            ],
        "desc_points": 
        [
            "Coded in the worst IDE ever known to humanity",
            "Developed the core typing algorithm using an implemented Stack data structure",
            "Enhanced finter-typing endurance because it's Java"
        ],
        "github": "https://github.com/yoyozhuang10/P1E-TipTapType"
    }
]